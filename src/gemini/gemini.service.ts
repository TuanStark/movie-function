import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';

@Injectable()
export class GeminiService {
  private genAI: GoogleGenerativeAI;

  constructor(private readonly config: ConfigService) {
    const apiKey = this.config.get<string>('GEMINI_API_KEY');
    this.genAI = new GoogleGenerativeAI(apiKey || '');
  }

  async analyze(message: string): Promise<{
    intent: string;
    filters: Record<string, string>;
    message?: string;
  }> {
    try {
      const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

      const today = new Date();
      const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000);
      const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);

      const prompt = `
        B·∫°n l√† tr·ª£ l√Ω AI c·ªßa r·∫°p chi·∫øu phim.
        N·∫øu ng∆∞·ªùi d√πng h·ªèi th√¥ng tin nh∆∞ phim, l·ªãch chi·∫øu, khuy·∫øn m√£i,... h√£y tr·∫£ v·ªÅ JSON v·ªõi intent + filters.
        N·∫øu ng∆∞·ªùi d√πng ch·ªâ mu·ªën tr√≤ chuy·ªán, h√£y tr·∫£ l·ªùi 1 c√°ch t·ª± nhi√™n (b·∫±ng ti·∫øng Vi·ªát).

        Filters: genre, movie, theater, date (YYYY-MM-DD), time

        H√¥m nay: ${today.toISOString().split('T')[0]}
        Ng√†y mai: ${tomorrow.toISOString().split('T')[0]}
        H√¥m qua: ${yesterday.toISOString().split('T')[0]}

        C√¢u h·ªèi: "${message}"

        Tr·∫£ v·ªÅ JSON thu·∫ßn, KH√îNG markdown, KH√îNG gi·∫£i th√≠ch. V√≠ d·ª•:
        {"intent": "chat", "filters": {}}
      `;
      console.log('[GeminiService] Analyzing:', prompt);

      const result = await model.generateContent(prompt);
      let text = result.response.text().trim();

      // Cleanup markdown ho·∫∑c ƒë·ªãnh d·∫°ng
      text = text.replace(/```json\s*|\s*```/g, '').replace(/```\s*|\s*```/g, '');
      text = text.replace(/^[^{]*/, '').replace(/[^}]*$/, '');

      console.log('[GeminiService] Raw response:', text);

      const parsed = JSON.parse(text);

      if (!parsed.intent || typeof parsed.filters !== 'object') {
        throw new Error('Invalid format');
      }

      // N·∫øu l√† chat ‚Üí tr·∫£ v·ªÅ intent chat ƒë·ªÉ ChatBotService x·ª≠ l√Ω
      if (parsed.intent === 'chat') {
        return {
          intent: 'chat',
          filters: { originalMessage: message },
        };
      }

      // Map ti·∫øng Anh sang ti·∫øng Vi·ªát n·∫øu c√≥ genre
      const genreMap: Record<string, string> = {
        action: 'H√†nh ƒë·ªông',
        comedy: 'H√†i',
        horror: 'Kinh D·ªã',
        'sci-fi': 'Khoa h·ªçc vi·ªÖn t∆∞·ªüng',
        romance: 'T√¨nh c·∫£m/l√£ng m·∫°n',
        animation: 'Ho·∫°t H√¨nh',
        adventure: 'Phi√™u l∆∞u',
        crime: 'T·ªôi ph·∫°m',
        drama: 'K·ªãch',
        history: 'L·ªãch s·ª≠',
        thriller: 'Gi·∫≠t g√¢n',
        family: 'Gia ƒë√¨nh',
      };

      const filters = parsed.filters || {};
      if (filters.genre) {
        filters.genre = genreMap[filters.genre.toLowerCase()] || filters.genre;
      }

      return { intent: parsed.intent, filters };
    } catch (err) {
      console.error('[GeminiService] L·ªói ph√¢n t√≠ch:', err);
      console.error('[GeminiService] Message:', message);
      return this.fallbackAnalyze(message);
    }
  }

  private fallbackAnalyze(message: string): {
    intent: string;
    filters: Record<string, string>;
    message?: string;
  } {
    const lower = message.toLowerCase();
    const filters: Record<string, string> = {};
    let intent = 'general';

    if (
      lower.includes('ch√†o') ||
      lower.includes('c·∫£m ∆°n') ||
      lower.includes('kh·ªèe kh√¥ng') ||
      lower.includes('b·∫°n l√† ai')
    ) {
      return {
        intent: 'chat',
        filters: { originalMessage: message },
      };
    }

    if (lower.includes('phim') || lower.includes('movie')) {
      if (lower.includes('su·∫•t chi·∫øu') || lower.includes('l·ªãch chi·∫øu') || lower.includes('showtime')) {
        intent = 'get_showtimes';
      } else if (lower.includes('ƒë·∫∑t v√©') || lower.includes('book')) {
        intent = 'book_ticket';
      } else if (lower.includes('ƒë√°nh gi√°') || lower.includes('review')) {
        intent = 'get_reviews';
      } else {
        intent = 'get_movies';
      }
    } else if (lower.includes('khuy·∫øn m√£i') || lower.includes('promotion')) {
      intent = 'get_promotions';
    }

    // Genre mapping (vi·ªát h√≥a)
    if (lower.includes('h√†nh ƒë·ªông')) filters.genre = 'H√†nh ƒë·ªông';
    else if (lower.includes('h√†i')) filters.genre = 'H√†i';
    else if (lower.includes('kinh d·ªã')) filters.genre = 'Kinh D·ªã';
    else if (lower.includes('khoa h·ªçc')) filters.genre = 'Khoa h·ªçc vi·ªÖn t∆∞·ªüng';
    else if (lower.includes('ho·∫°t h√¨nh')) filters.genre = 'Ho·∫°t H√¨nh';
    else if (lower.includes('t√¨nh c·∫£m') || lower.includes('l√£ng m·∫°n')) filters.genre = 'T√¨nh c·∫£m/l√£ng m·∫°n';
    else if (lower.includes('gi·∫≠t g√¢n')) filters.genre = 'Gi·∫≠t g√¢n';
    else if (lower.includes('gia ƒë√¨nh')) filters.genre = 'Gia ƒë√¨nh';

    if (lower.includes('cgv')) filters.theater = 'CGV';
    else if (lower.includes('lotte')) filters.theater = 'Lotte';

    if (lower.includes('h√¥m nay') || lower.includes('today')) {
      filters.date = new Date().toISOString().split('T')[0];
    } else if (lower.includes('ng√†y mai') || lower.includes('tomorrow')) {
      const tmr = new Date(); tmr.setDate(tmr.getDate() + 1);
      filters.date = tmr.toISOString().split('T')[0];
    } else if (lower.includes('h√¥m qua') || lower.includes('yesterday')) {
      const yest = new Date(); yest.setDate(yest.getDate() - 1);
      filters.date = yest.toISOString().split('T')[0];
    }

    const timeMatch = message.match(/\b(\d{1,2}(:\d{2})?\s*(AM|PM|am|pm)?)\b/);
    if (timeMatch) filters.time = timeMatch[1];

    return { intent, filters };
  }

  async generateChatResponse(message: string): Promise<string> {
    try {
      const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

      const result = await model.generateContent(`
        B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán cho h·ªá th·ªëng r·∫°p chi·∫øu phim. H√£y tr·∫£ l·ªùi tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán.

        Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng: "${message}"

        H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
        - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, th√¢n thi·ªán
        - N·∫øu ng∆∞·ªùi d√πng ch√†o h·ªèi, h√£y ch√†o l·∫°i v√† gi·ªõi thi·ªáu b·∫£n th√¢n
        - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ kh·∫£ nƒÉng, h√£y gi·∫£i th√≠ch b·∫°n c√≥ th·ªÉ gi√∫p g√¨ v·ªÅ phim ·∫£nh
        - N·∫øu ng∆∞·ªùi d√πng c·∫£m ∆°n, h√£y ƒë√°p l·∫°i l·ªãch s·ª±
        - N·∫øu ng∆∞·ªùi d√πng h·ªèi c√¢u h·ªèi chung, h√£y tr·∫£ l·ªùi v√† g·ª£i √Ω v·ªÅ d·ªãch v·ª• phim
        - Lu√¥n gi·ªØ t√¥ng gi·ªçng vui v·∫ª, h·ªØu √≠ch
        - Kh√¥ng tr·∫£ l·ªùi qu√° d√†i, kho·∫£ng 1-2 c√¢u
        - C√≥ th·ªÉ s·ª≠ d·ª•ng emoji ph√π h·ª£p

        V√≠ d·ª•:
        - "Hello" ‚Üí "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa r·∫°p phim. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m phim, xem l·ªãch chi·∫øu, ho·∫∑c ƒë·∫∑t v√©. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨? üé¨"
        - "C·∫£m ∆°n" ‚Üí "Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng gi√∫p b·∫°n v·ªÅ m·ªçi th·ª© li√™n quan ƒë·∫øn phim ·∫£nh. üòä"
        - "B·∫°n l√† ai?" ‚Üí "T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng r·∫°p chi·∫øu phim, c√≥ th·ªÉ gi√∫p b·∫°n t√¨m phim hay, xem l·ªãch chi·∫øu v√† ƒë·∫∑t v√© m·ªôt c√°ch d·ªÖ d√†ng! ü§ñ"

        Tr·∫£ l·ªùi ng·∫Øn g·ªçn:
      `);

      return result.response.text().trim();
    } catch (err) {
      console.error('[GeminiService] L·ªói t·∫°o chat response:', err);

      // Fallback responses
      const lower = message.toLowerCase();

      if (lower.includes('ch√†o') || lower.includes('hi') || lower.includes('hello')) {
        return 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa r·∫°p phim. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m phim, xem l·ªãch chi·∫øu, ho·∫∑c ƒë·∫∑t v√©. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨? üé¨';
      } else if (lower.includes('c·∫£m ∆°n') || lower.includes('thank')) {
        return 'Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng gi√∫p b·∫°n v·ªÅ m·ªçi th·ª© li√™n quan ƒë·∫øn phim ·∫£nh. üòä';
      } else if (lower.includes('b·∫°n l√† ai') || lower.includes('who are you')) {
        return 'T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng r·∫°p chi·∫øu phim, c√≥ th·ªÉ gi√∫p b·∫°n t√¨m phim hay, xem l·ªãch chi·∫øu v√† ƒë·∫∑t v√© m·ªôt c√°ch d·ªÖ d√†ng! ü§ñ';
      } else if (lower.includes('kh·ªèe kh√¥ng') || lower.includes('how are you')) {
        return 'T√¥i r·∫•t ·ªïn, c·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m phim hay g√¨ kh√¥ng? üòä';
      } else if (lower.includes('t·∫°m bi·ªát') || lower.includes('bye')) {
        return 'T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n v√† ch√∫c b·∫°n xem phim vui v·∫ª! üëã';
      } else {
        return 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m phim, xem l·ªãch chi·∫øu, ƒë·∫∑t v√© v√† nhi·ªÅu th·ª© kh√°c v·ªÅ phim ·∫£nh. B·∫°n mu·ªën l√†m g√¨? üé≠';
      }
    }
  }
}
